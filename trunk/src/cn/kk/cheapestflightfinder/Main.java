/*  Copyright (c) 2012 Xiaoyun Zhu
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining a copy  
 *  of this software and associated documentation files (the "Software"), to deal  
 *  in the Software without restriction, including without limitation the rights  
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  
 *  copies of the Software, and to permit persons to whom the Software is  
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in  
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  
 *  THE SOFTWARE.  
 */
package cn.kk.cheapestflightfinder;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

public class Main extends javax.swing.JFrame {
    private static final String TEXT_STOP = "取消查询";
    private static final Dimension SCREEN_SIZE = Toolkit.getDefaultToolkit().getScreenSize();
    private static final Color SELECTION_COLOR = new java.awt.Color(146, 173, 247);
    private static final int CURRENT_YEAR;
    private static final int CURRENT_MONTH;
    private static final int CURRENT_DAY;

    static {
        Calendar now = Calendar.getInstance();
        now.add(Calendar.DAY_OF_YEAR, 7);
        CURRENT_YEAR = now.get(Calendar.YEAR);
        CURRENT_MONTH = now.get(Calendar.MONTH);
        CURRENT_DAY = now.get(Calendar.DAY_OF_MONTH);
    }

    private static final int getDay(JComboBox cbDay) {
        return cbDay.getSelectedIndex() + 1;
    }

    private static final int getMonth(JComboBox cbMonth) {
        return cbMonth.getSelectedIndex();
    }

    private static final int getYear(JComboBox cbYear) {
        return Main.CURRENT_YEAR + cbYear.getSelectedIndex();
    }

    /**
     * Creates new form Find
     * 
     * @throws IOException
     */
    public Main() throws IOException {
        setIconImage(ImageIO.read(getClass().getResource("/flight.png")));
        initComponents();
        setLocation((Main.SCREEN_SIZE.width - getWidth()) / 2, (Main.SCREEN_SIZE.height - getHeight()) / 2);
    }

    private static final void checkMaxDays(JComboBox cbYear, JComboBox cbMonth, JComboBox cbDay) {
        final int selected = cbDay.getSelectedIndex();
        if (selected > 0) {
            cbDay.setSelectedIndex(0);
            Calendar cal = new GregorianCalendar(Main.getYear(cbYear), Main.getMonth(cbMonth), Main.getDay(cbDay));
            final int maxDays = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
            final int days = cbDay.getItemCount();
            if (days < maxDays) {
                for (int i = days + 1; i <= maxDays; i++) {
                    cbDay.addItem(Main.fill(i));
                }
            } else if (days > maxDays) {
                for (int i = days - maxDays; i > 0; i--) {
                    cbDay.removeItemAt(cbDay.getItemCount() - 1);
                }
            }
            cbDay.setSelectedIndex(Math.min(selected, cbDay.getItemCount() - 1));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        this.pnlForm = new javax.swing.JPanel();
        this.lblFrom = new javax.swing.JLabel();
        this.cbFrom = new WideComboBox();
        this.lblTo = new javax.swing.JLabel();
        this.cbTo = new WideComboBox();
        this.lblDep = new javax.swing.JLabel();
        this.cbDepDay = new WideComboBox();
        this.cbDepMonth = new WideComboBox();
        this.cbDepYear = new WideComboBox();
        this.lblReturn = new javax.swing.JLabel();
        this.cbReturnDay = new WideComboBox();
        this.cbReturnMonth = new WideComboBox();
        this.cbReturnYear = new WideComboBox();
        this.lblMin = new javax.swing.JLabel();
        this.tfMin = new javax.swing.JFormattedTextField(new javax.swing.text.NumberFormatter(
                new java.text.DecimalFormat("###")));
        this.lblMax = new javax.swing.JLabel();
        this.tfMax = new javax.swing.JFormattedTextField(new javax.swing.text.NumberFormatter(
                new java.text.DecimalFormat("###")));
        this.chkDirect = new javax.swing.JCheckBox();
        this.chkEconomy = new javax.swing.JCheckBox();
        this.chkReturn = new javax.swing.JCheckBox();
        this.btnSearch = new javax.swing.JButton();
        this.btnSave = new javax.swing.JButton();
        this.spResults = new javax.swing.JScrollPane();
        this.tblResults = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("穷飞 - 机票价格查询");
        setBackground(new java.awt.Color(255, 255, 255));

        this.pnlForm.setBackground(new java.awt.Color(207, 245, 255));
        this.pnlForm.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        this.lblFrom.setLabelFor(this.cbFrom);
        this.lblFrom.setText("出发地");
        this.lblFrom.setToolTipText("起飞机场");

        this.cbFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        this.cbFrom.setToolTipText("起飞机场");
        this.cbFrom.setOpaque(false);

        this.lblTo.setLabelFor(this.cbTo);
        this.lblTo.setText("目的地");
        this.lblTo.setToolTipText("目的地机场");

        this.cbTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        this.cbTo.setToolTipText("目的地机场");
        this.cbTo.setOpaque(false);

        this.lblDep.setLabelFor(this.cbDepDay);
        this.lblDep.setText("最早起飞");
        this.lblDep.setToolTipText("最早出发日期");

        this.cbDepDay.setToolTipText("最早出发日期");
        this.cbDepDay.setOpaque(false);

        this.cbDepMonth.setToolTipText("最早出发日期");
        this.cbDepMonth.setOpaque(false);
        this.cbDepMonth.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDepMonthActionPerformed(evt);
            }
        });

        this.cbDepYear.setToolTipText("最早出发日期");
        this.cbDepYear.setOpaque(false);

        this.lblReturn.setLabelFor(this.cbReturnDay);
        this.lblReturn.setText("最晚回程");
        this.lblReturn.setToolTipText("最晚回程日期");

        this.cbReturnDay.setToolTipText("最晚回程日期");
        this.cbReturnDay.setOpaque(false);

        this.cbReturnMonth.setToolTipText("最晚回程日期");
        this.cbReturnMonth.setOpaque(false);
        this.cbReturnMonth.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbReturnMonthActionPerformed(evt);
            }
        });

        this.cbReturnYear.setToolTipText("最晚回程日期");
        this.cbReturnYear.setOpaque(false);

        this.lblMin.setText("最短停留");
        this.lblMin.setToolTipText("最短停留时间[天]");

        this.tfMin.setHorizontalAlignment(SwingConstants.RIGHT);
        this.tfMin.setText("14");
        this.tfMin.setToolTipText("最短停留时间[天]");
        this.tfMin.setSelectionColor(getBackground());

        this.lblMax.setText("最长停留");
        this.lblMax.setToolTipText("最长停留时间[天]");

        this.tfMax.setHorizontalAlignment(SwingConstants.RIGHT);
        this.tfMax.setText("45");
        this.tfMax.setToolTipText("最长停留时间[天]");
        this.tfMax.setSelectionColor(this.tfMin.getSelectionColor());

        this.chkDirect.setSelected(true);
        this.chkDirect.setText("只限直飞");
        this.chkDirect.setToolTipText("只显示直飞机票");
        this.chkDirect.setOpaque(false);

        this.chkEconomy.setSelected(true);
        this.chkEconomy.setText("经济舱");
        this.chkEconomy.setToolTipText("经济舱");
        this.chkEconomy.setOpaque(false);

        this.chkReturn.setSelected(true);
        this.chkReturn.setText("往返");
        this.chkReturn.setToolTipText("往返票");
        this.chkReturn.setOpaque(false);
        this.chkReturn.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkReturnActionPerformed(evt);
            }
        });

        this.btnSearch.setText("查询价格");
        this.btnSearch.setToolTipText("开始查询最优惠机票价格");
        this.btnSearch.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        this.btnSave.setText("导出");
        this.btnSave.setToolTipText("保存机票价格结果");
        this.btnSave.setEnabled(false);
        this.btnSave.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        GroupLayout pnlFormLayout = new GroupLayout(this.pnlForm);
        this.pnlForm.setLayout(pnlFormLayout);
        pnlFormLayout
                .setHorizontalGroup(pnlFormLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(
                                pnlFormLayout
                                        .createSequentialGroup()
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.lblFrom, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(this.lblTo, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, true)
                                                        .addComponent(this.cbFrom, GroupLayout.PREFERRED_SIZE, 280,
                                                                Short.MAX_VALUE)
                                                        .addComponent(this.cbTo, GroupLayout.PREFERRED_SIZE, 280,
                                                                Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.lblReturn, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(this.lblDep, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.cbDepYear, 0, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE)
                                                        .addComponent(this.cbReturnYear, 0, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.cbDepMonth, 0, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE)
                                                        .addComponent(this.cbReturnMonth, 0, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.cbDepDay, 0, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE)
                                                        .addComponent(this.cbReturnDay, 0, GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.lblMax, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(this.lblMin, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.tfMin, GroupLayout.DEFAULT_SIZE, 40,
                                                                Short.MAX_VALUE)
                                                        .addComponent(this.tfMax, GroupLayout.DEFAULT_SIZE, 40,
                                                                Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(
                                                                pnlFormLayout.createSequentialGroup().addComponent(
                                                                        this.chkEconomy, GroupLayout.DEFAULT_SIZE,
                                                                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addGroup(
                                                                pnlFormLayout.createSequentialGroup().addComponent(
                                                                        this.chkDirect, GroupLayout.DEFAULT_SIZE,
                                                                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout
                                                        .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(this.btnSave, GroupLayout.DEFAULT_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(this.chkReturn, GroupLayout.DEFAULT_SIZE, 60,
                                                                Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(
                                                pnlFormLayout.createSequentialGroup().addComponent(this.btnSearch,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                                        GroupLayout.PREFERRED_SIZE)))

                );
        pnlFormLayout.setVerticalGroup(pnlFormLayout
                .createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                        pnlFormLayout
                                .createSequentialGroup()
                                .addGroup(
                                        pnlFormLayout
                                                .createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(this.lblFrom)
                                                .addComponent(this.cbFrom, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(this.lblDep)
                                                .addComponent(this.cbDepDay, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(this.cbDepMonth, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(this.cbDepYear, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(this.lblMin)
                                                .addComponent(this.tfMin, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(this.chkDirect).addComponent(this.chkReturn))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(
                                        pnlFormLayout
                                                .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                .addComponent(this.lblTo)
                                                .addGroup(
                                                        pnlFormLayout
                                                                .createParallelGroup(GroupLayout.Alignment.BASELINE,
                                                                        false).addComponent(this.lblReturn)
                                                                .addComponent(this.cbReturnDay)
                                                                .addComponent(this.cbReturnMonth)
                                                                .addComponent(this.cbReturnYear)
                                                                .addComponent(this.lblMax).addComponent(this.tfMax)
                                                                .addComponent(this.chkEconomy)
                                                                .addComponent(this.btnSave).addComponent(this.cbTo))))
                .addGroup(
                        pnlFormLayout.createSequentialGroup().addComponent(this.btnSearch, GroupLayout.PREFERRED_SIZE,
                                GroupLayout.PREFERRED_SIZE, Short.MAX_VALUE)));

        this.spResults.setOpaque(false);

        this.tblResults.setAutoCreateRowSorter(true);
        this.tblResults.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

        }, new String[] {
                "价格 [€]", "起飞日期", "旅程时间", "航空公司", "回程时间", "旅程时间", "航空公司", "网站链接"
        }) {
            Class[] types = new Class[] {
                    java.lang.Double.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    java.lang.String.class,
                    URL.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, false, false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return this.types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return this.canEdit[columnIndex];
            }
        });
        UriCellRenderer renderer = new UriCellRenderer();
        this.tblResults.setDefaultRenderer(URL.class, renderer);
        this.tblResults.addMouseListener(renderer);
        this.tblResults.addMouseMotionListener(renderer);
        // this.tblResults.setCellSelectionEnabled(true);
        this.tblResults.setGridColor(Color.DARK_GRAY);
        this.tblResults.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        TableColumnModel colModel = this.tblResults.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(160);
        colModel.getColumn(1).setPreferredWidth(180);
        colModel.getColumn(2).setPreferredWidth(180);
        colModel.getColumn(3).setPreferredWidth(220);
        colModel.getColumn(4).setPreferredWidth(180);
        colModel.getColumn(5).setPreferredWidth(180);
        colModel.getColumn(6).setPreferredWidth(220);
        colModel.getColumn(7).setPreferredWidth(400);
        // this.tblResults.setSelectionBackground(this.tfMin.getSelectionColor());
        // this.tblResults.setSelectionForeground(new java.awt.Color(0, 153, 102));
        this.spResults.setViewportView(this.tblResults);
        this.spResults.getViewport().setBackground(new Color(0xf0f0fe));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(this.spResults)
                .addComponent(this.pnlForm, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup()
                        .addComponent(this.pnlForm, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE,
                                GroupLayout.PREFERRED_SIZE)
                        .addComponent(this.spResults, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE,
                                Short.MAX_VALUE)));

        setPreferredSize(new Dimension(900, 460));
        setMinimumSize(getPreferredSize());
    }// </editor-fold>

    private void chkReturnActionPerformed(java.awt.event.ActionEvent evt) {
        checkReturnState();
    }

    private void cbDepMonthActionPerformed(java.awt.event.ActionEvent evt) {
        Main.checkMaxDays(this.cbDepYear, this.cbDepMonth, this.cbDepDay);
    }

    private void cbReturnMonthActionPerformed(java.awt.event.ActionEvent evt) {
        Main.checkMaxDays(this.cbReturnYear, this.cbReturnMonth, this.cbReturnDay);
    }

    private void btnSaveActionPerformed(ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                return pathname.getName().endsWith(".txt");
            }

            @Override
            public String getDescription() {
                return "机票报价表文件";
            }
        });
        int ret = fc.showSaveDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            saveResults(f);
        }
    }

    private void saveResults(final File f) {
        try {
            try {
                FileWriter writer = new FileWriter(f);
                try {
                    final int rows = Main.this.tblResults.getRowCount();
                    final int cols = Main.this.tblResults.getColumnCount();
                    for (int i = 0; i < rows; i++) {
                        for (int j = 0; j < cols; j++) {
                            writer.write(Main.this.tblResults.getValueAt(i, j).toString());
                            writer.write("; ");
                        }
                        writer.write("\r\n");
                    }
                } finally {
                    writer.close();
                }
            } catch (Exception e) {
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
        if (Main.TEXT_STOP.equals(this.btnSearch.getText())) {
            this.btnSearch.setEnabled(false);
            CheapestFlightFinder.cancelSearch();
            reset();
        } else {
            try {
                disableMain();
                this.btnSearch.setText(Main.TEXT_STOP);
                this.btnSearch.setEnabled(true);

                DefaultTableModel model = ((DefaultTableModel) this.tblResults.getModel());
                while (model.getRowCount() > 0) {
                    model.removeRow(0);
                }

                new Thread() {
                    @Override
                    public void run() {
                        try {
                            Calendar calDep = new GregorianCalendar(Main.getYear(Main.this.cbDepYear),
                                    Main.getMonth(Main.this.cbDepMonth), Main.getDay(Main.this.cbDepDay));
                            Calendar calRet = new GregorianCalendar(Main.getYear(Main.this.cbReturnYear),
                                    Main.getMonth(Main.this.cbReturnMonth), Main.getDay(Main.this.cbReturnDay));
                            CheapestFlightFinder.setMain(Main.this);
                            CheapestFlightFinder.search(
                                    Helper.substringBetweenLast((String) Main.this.cbFrom.getSelectedItem(), "[", "]"),
                                    Helper.substringBetweenLast((String) Main.this.cbTo.getSelectedItem(), "[", "]"),
                                    calDep, calRet, Integer.parseInt(Main.this.tfMin.getText()),
                                    Integer.parseInt(Main.this.tfMax.getText()), Main.this.chkDirect.isSelected(),
                                    Main.this.chkEconomy.isSelected(), Main.this.chkReturn.isSelected());
                        } catch (Exception e) {
                            e.printStackTrace();
                        } finally {
                            try {
                                SwingUtilities.invokeAndWait(new Runnable() {

                                    @Override
                                    public void run() {
                                        reset();
                                    }
                                });
                            } catch (Exception ex) {
                                reset();
                            }
                        }
                    }
                }.start();
            } catch (Throwable t) {
                reset();
            }
        }
    }

    private void disableMain() {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.btnSave.setEnabled(false);
        this.btnSearch.setEnabled(false);
        this.chkReturn.setEnabled(false);
        this.chkDirect.setEnabled(false);
        this.chkEconomy.setEnabled(false);
        this.cbDepDay.setEnabled(false);
        this.cbDepMonth.setEnabled(false);
        this.cbDepYear.setEnabled(false);
        this.cbReturnDay.setEnabled(false);
        this.cbReturnMonth.setEnabled(false);
        this.cbReturnYear.setEnabled(false);
        this.tfMin.setEnabled(false);
        this.tfMax.setEnabled(false);
        this.cbFrom.setEnabled(false);
        this.cbTo.setEnabled(false);
    }

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.put("ComboBox.selectionBackground", Main.SELECTION_COLOR);
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.err.println("软件错误。请重新安装。");
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    final Main m = new Main();
                    m.disableMain();
                    m.setVisible(true);
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                m.initValues();
                            } catch (Exception e) {
                                e.printStackTrace();
                            } finally {
                                m.reset();
                            }
                        }
                    });
                } catch (IOException e) {
                    System.err.println("软件错误。请重新安装。");
                }
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cbDepDay;
    private javax.swing.JComboBox cbDepMonth;
    private javax.swing.JComboBox cbDepYear;
    private javax.swing.JComboBox cbFrom;
    private javax.swing.JComboBox cbReturnDay;
    private javax.swing.JComboBox cbReturnMonth;
    private javax.swing.JComboBox cbReturnYear;
    private javax.swing.JComboBox cbTo;
    private javax.swing.JCheckBox chkDirect;
    private javax.swing.JCheckBox chkEconomy;
    private javax.swing.JCheckBox chkReturn;
    private javax.swing.JLabel lblDep;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblMax;
    private javax.swing.JLabel lblMin;
    private javax.swing.JLabel lblReturn;
    private javax.swing.JLabel lblTo;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JScrollPane spResults;
    private javax.swing.JTable tblResults;
    private javax.swing.JFormattedTextField tfMax;
    private javax.swing.JFormattedTextField tfMin;

    // End of variables declaration

    private void initValues() throws IllegalArgumentException, IOException {
        final List<String> airports = new LinkedList<String>();
        BufferedReader reader = new BufferedReader(new InputStreamReader(Helper.findResourceAsStream("airports.lst")));
        String line;
        while (null != (line = reader.readLine())) {
            this.cbFrom.addItem(line);
            this.cbTo.addItem(line);
        }
        reader.close();
        for (int i = 0; i < this.cbFrom.getItemCount(); i++) {
            if (((String) this.cbFrom.getItemAt(i)).contains("FRA")) {
                this.cbFrom.setSelectedIndex(i);
            }
            if (((String) this.cbFrom.getItemAt(i)).contains("PVG")) {
                this.cbTo.setSelectedIndex(i);
            }
        }

        checkReturnState();
        for (int i = Main.CURRENT_YEAR; i < (Main.CURRENT_YEAR + 10); i++) {
            this.cbDepYear.addItem(String.valueOf(i));
            this.cbReturnYear.addItem(String.valueOf(i));
        }
        this.cbDepYear.setSelectedIndex(0);
        this.cbReturnYear.setSelectedIndex(0);

        for (int i = 1; i <= 12; i++) {
            this.cbDepMonth.addItem(Main.fill(i));
            this.cbReturnMonth.addItem(Main.fill(i));
        }
        this.cbDepMonth.setSelectedIndex(Main.CURRENT_MONTH);
        if (Main.CURRENT_MONTH < 9) {
            this.cbReturnMonth.setSelectedIndex(Main.CURRENT_MONTH + 3);
        } else {
            this.cbReturnMonth.setSelectedIndex((Main.CURRENT_MONTH + 2) - 11);
            this.cbReturnYear.setSelectedIndex(1);
        }

        for (int i = 1; i <= 31; i++) {
            this.cbDepDay.addItem(Main.fill(i));
            this.cbReturnDay.addItem(Main.fill(i));
        }
        this.cbDepDay.setSelectedIndex(Main.CURRENT_DAY - 1);
        this.cbReturnDay.setSelectedIndex(Main.CURRENT_DAY - 1);

        Main.checkMaxDays(this.cbDepYear, this.cbDepMonth, this.cbDepDay);
        Main.checkMaxDays(this.cbReturnYear, this.cbReturnMonth, this.cbReturnDay);

        this.tblResults.getRowSorter().toggleSortOrder(0);
    }

    private static final String fill(int i) {
        if (i < 10) {
            return "0" + i;
        } else {
            return String.valueOf(i);
        }
    }

    private void checkReturnState() {
        if (this.chkReturn.isSelected()) {
            this.tfMin.setEnabled(true);
            this.tfMax.setEnabled(true);
            this.lblReturn.setText("最晚回程");
        } else {
            this.tfMin.setEnabled(false);
            this.tfMax.setEnabled(false);
            this.lblReturn.setText("最晚起飞");
        }
    }

    private void reset() {
        this.cbFrom.setEnabled(true);
        this.cbTo.setEnabled(true);
        this.chkReturn.setEnabled(true);
        this.chkDirect.setEnabled(true);
        this.chkEconomy.setEnabled(true);
        this.cbDepDay.setEnabled(true);
        this.cbDepMonth.setEnabled(true);
        this.cbDepYear.setEnabled(true);
        this.cbReturnDay.setEnabled(true);
        this.cbReturnMonth.setEnabled(true);
        this.cbReturnYear.setEnabled(true);
        this.tfMin.setEnabled(true);
        this.tfMax.setEnabled(true);
        this.btnSearch.setEnabled(true);
        checkReturnState();
        this.btnSearch.setText("查询价格");
        setCursor(Cursor.getDefaultCursor());
    }

    public void onFlightFound(final Flight flight) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                String url = Helper.chopNull(flight.getSearchPage());
                if (url.isEmpty()) {
                    url = "http://www.fluege.de?k=1";
                }
                try {
                    ((DefaultTableModel) Main.this.tblResults.getModel()).insertRow(0, new Object[] {
                            Double.valueOf(flight.getPriceValue()),
                            Helper.chopNull(flight.getDepartureDateAsString()),
                            Helper.chopNull(flight.getDepDuration()),
                            Helper.chopNull(flight.getDepAirline()),
                            Helper.chopNull(flight.getReturnDateAsString()),
                            Helper.chopNull(flight.getRetDuration()),
                            Helper.chopNull(flight.getRetAirline()),
                            new URL(url)
                    });
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }
                Main.this.btnSave.setEnabled(true);
            }
        });
    }
}
